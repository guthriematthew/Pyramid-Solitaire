import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import cs3500.pyramidsolitaire.model.hw02.SolitaireCard;

/**
 * Examples of standard decks of cards in different orders for testing.
 */
public class ExampleDecks {
  CardExamples cards = new CardExamples();

  public List<SolitaireCard> deck1 = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.diamondAce,
          cards.spadeAce, cards.heartAce, cards.clubTwo, cards.diamondTwo,
          cards.spadeTwo, cards.heartTwo, cards.clubThree, cards.diamondThree,
          cards.spadeThree, cards.heartThree, cards.clubFour, cards.diamondFour,
          cards.spadeFour, cards.heartFour, cards.clubFive, cards.diamondFive,
          cards.spadeFive, cards.heartFive, cards.clubSix, cards.diamondSix,
          cards.spadeSix, cards.heartSix, cards.clubSeven, cards.diamondSeven,
          cards.spadeSeven, cards.heartSeven, cards.clubEight, cards.diamondEight,
          cards.spadeEight, cards.heartEight, cards.clubNine, cards.diamondNine,
          cards.spadeNine, cards.heartNine, cards.clubTen, cards.diamondTen,
          cards.spadeTen, cards.heartTen, cards.clubJack, cards.diamondJack,
          cards.spadeJack, cards.heartJack, cards.clubQueen, cards.diamondQueen,
          cards.spadeQueen, cards.heartQueen, cards.clubKing, cards.diamondKing,
          cards.spadeKing, cards.heartKing));

  public List<SolitaireCard> assignmentDeck = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.spadeKing));

  public List<SolitaireCard> lastPlayableDeck = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight,
                  cards.clubTen, cards.heartTen, cards.clubJack, cards.clubQueen,
                  cards.clubKing, cards.diamondAce, cards.diamondTwo, cards.diamondThree,
                  cards.diamondFour, cards.diamondFive, cards.diamondSix, cards.diamondSeven,
                  cards.diamondEight, cards.diamondNine, cards.diamondTen, cards.clubNine,
                  cards.diamondJack, cards.diamondKing, cards.heartAce, cards.heartTwo,
                  cards.heartFour, cards.spadeEight, cards.heartFive, cards.heartThree,
                  cards.heartSix, cards.heartSeven, cards.heartEight, cards.heartNine,
                  cards.heartJack, cards.heartQueen, cards.heartKing, cards.spadeAce,
                  cards.spadeFive, cards.spadeNine, cards.spadeTwo, cards.spadeThree,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.spadeKing, cards.spadeFour));

  public List<SolitaireCard> winDeck = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight,
                  cards.clubTen, cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.spadeSix, cards.spadeSeven, cards.spadeTen, cards.spadeJack,
                  cards.spadeQueen, cards.spadeKing, cards.diamondQueen));

  public List<SolitaireCard> winNoDrawDeck = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeKing, cards.heartKing, cards.clubKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive,
                  cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.diamondAce,
                  cards.diamondTwo, cards.diamondThree, cards.diamondFour, cards.diamondFive,
                  cards.diamondSix, cards.diamondSeven, cards.diamondEight, cards.diamondNine,
                  cards.diamondTen, cards.clubNine, cards.diamondJack, cards.diamondKing,
                  cards.heartAce, cards.heartTwo, cards.heartFour, cards.spadeEight,
                  cards.heartFive, cards.heartThree, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartJack, cards.heartQueen,
                  cards.spadeAce, cards.spadeFive, cards.spadeNine, cards.spadeTwo,
                  cards.spadeThree, cards.spadeFour, cards.spadeSix, cards.spadeSeven,
                  cards.spadeTen, cards.spadeJack, cards.spadeQueen, cards.diamondQueen));

  public List<SolitaireCard> winNoDrawDeck2 = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeKing, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight,
                  cards.clubTen, cards.heartTen, cards.clubJack, cards.clubQueen,
                  cards.clubKing, cards.diamondAce, cards.diamondTwo, cards.diamondThree,
                  cards.diamondFour, cards.diamondFive, cards.diamondSix, cards.diamondSeven,
                  cards.diamondEight, cards.diamondNine, cards.diamondTen, cards.clubNine,
                  cards.diamondJack, cards.diamondKing, cards.heartAce, cards.heartTwo,
                  cards.heartFour, cards.spadeEight, cards.heartFive, cards.heartThree,
                  cards.heartSix, cards.heartSeven, cards.heartEight, cards.heartNine,
                  cards.heartJack, cards.heartQueen, cards.heartKing, cards.spadeAce,
                  cards.spadeFive, cards.spadeNine, cards.spadeTwo, cards.spadeThree,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.clubAce, cards.spadeFour));

  public List<SolitaireCard> getDeckDeck = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeAce, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.spadeFive, cards.spadeSix, cards.spadeSeven, cards.spadeEight,
                  cards.spadeNine, cards.spadeTen, cards.spadeJack, cards.spadeQueen,
                  cards.spadeKing, cards.heartAce, cards.heartTwo, cards.heartThree,
                  cards.heartFour, cards.heartFive, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartTen, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.diamondAce, cards.diamondTwo,
                  cards.diamondThree, cards.diamondFour, cards.diamondFive, cards.diamondSix,
                  cards.diamondSeven, cards.diamondEight, cards.diamondNine, cards.diamondTen,
                  cards.diamondJack, cards.diamondQueen, cards.diamondKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive, cards.clubSix,
                  cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen, cards.clubJack,
                  cards.clubQueen, cards.clubKing)
  );

  public List<SolitaireCard> kingRemoval = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeAce, cards.spadeTwo, cards.clubKing, cards.spadeFour,
                  cards.spadeFive, cards.spadeSix, cards.spadeSeven, cards.spadeEight,
                  cards.spadeNine, cards.spadeTen, cards.spadeJack, cards.spadeQueen,
                  cards.spadeKing, cards.heartAce, cards.heartTwo, cards.heartThree,
                  cards.heartFour, cards.heartFive, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartTen, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.diamondAce, cards.diamondTwo,
                  cards.diamondThree, cards.diamondFour, cards.diamondFive, cards.diamondSix,
                  cards.diamondSeven, cards.diamondEight, cards.diamondNine, cards.diamondTen,
                  cards.diamondJack, cards.diamondQueen, cards.diamondKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive, cards.clubSix,
                  cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen, cards.clubJack,
                  cards.clubQueen, cards.spadeThree)
  );

  public List<SolitaireCard> relaxedDeckLeft = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.heartQueen, cards.clubKing, cards.diamondAce,
                  cards.spadeAce, cards.heartAce, cards.clubTwo, cards.diamondTwo,
                  cards.spadeTwo, cards.heartTwo, cards.clubThree, cards.diamondThree,
                  cards.spadeThree, cards.heartThree, cards.clubFour, cards.diamondFour,
                  cards.spadeFour, cards.heartFour, cards.clubFive, cards.diamondFive,
                  cards.spadeFive, cards.heartFive, cards.clubSix, cards.diamondSix,
                  cards.spadeSix, cards.heartSix, cards.clubSeven, cards.diamondSeven,
                  cards.spadeSeven, cards.heartSeven, cards.clubEight, cards.diamondEight,
                  cards.spadeEight, cards.heartEight, cards.clubNine, cards.diamondNine,
                  cards.spadeNine, cards.heartNine, cards.clubTen, cards.diamondTen,
                  cards.spadeTen, cards.heartTen, cards.clubJack, cards.diamondJack,
                  cards.spadeJack, cards.heartJack, cards.clubQueen, cards.diamondQueen,
                  cards.spadeQueen, cards.diamondKing,
                  cards.spadeKing, cards.heartKing));

  public List<SolitaireCard> relaxedDeckRight = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubSeven, cards.clubKing, cards.heartSix,
                  cards.clubAce, cards.heartQueen, cards.diamondAce,
                  cards.spadeAce, cards.heartAce, cards.clubTwo, cards.diamondTwo,
                  cards.spadeTwo, cards.heartTwo, cards.clubThree, cards.diamondThree,
                  cards.spadeThree, cards.heartThree, cards.clubFour, cards.diamondFour,
                  cards.spadeFour, cards.heartFour, cards.clubFive, cards.diamondFive,
                  cards.spadeFive, cards.heartFive, cards.clubSix, cards.diamondSix,
                  cards.spadeSix, cards.diamondSeven,
                  cards.spadeSeven, cards.heartSeven, cards.clubEight, cards.diamondEight,
                  cards.spadeEight, cards.heartEight, cards.clubNine, cards.diamondNine,
                  cards.spadeNine, cards.heartNine, cards.clubTen, cards.diamondTen,
                  cards.spadeTen, cards.heartTen, cards.clubJack, cards.diamondJack,
                  cards.spadeJack, cards.heartJack, cards.clubQueen, cards.diamondQueen,
                  cards.spadeQueen, cards.diamondKing,
                  cards.spadeKing, cards.heartKing));

  public List<SolitaireCard> getDeckDeckTri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeAce, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.spadeFive, cards.spadeSix, cards.spadeSeven, cards.spadeEight,
                  cards.spadeNine, cards.spadeTen, cards.spadeJack, cards.spadeQueen,
                  cards.spadeKing, cards.heartAce, cards.heartTwo, cards.heartThree,
                  cards.heartFour, cards.heartFive, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartTen, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.diamondAce, cards.diamondTwo,
                  cards.diamondThree, cards.diamondFour, cards.diamondFive, cards.diamondSix,
                  cards.diamondSeven, cards.diamondEight, cards.diamondNine, cards.diamondTen,
                  cards.diamondJack, cards.diamondQueen, cards.diamondKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive, cards.clubSix,
                  cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen, cards.clubJack,
                  cards.clubQueen, cards.clubKing, cards.spadeAce, cards.spadeTwo, cards.spadeThree,
                  cards.spadeFour, cards.spadeFive, cards.spadeSix, cards.spadeSeven,
                  cards.spadeEight, cards.spadeNine, cards.spadeTen, cards.spadeJack,
                  cards.spadeQueen, cards.spadeKing, cards.heartAce, cards.heartTwo,
                  cards.heartThree, cards.heartFour, cards.heartFive, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartTen,
                  cards.heartJack, cards.heartQueen, cards.heartKing, cards.diamondAce,
                  cards.diamondTwo, cards.diamondThree, cards.diamondFour, cards.diamondFive,
                  cards.diamondSix, cards.diamondSeven, cards.diamondEight, cards.diamondNine,
                  cards.diamondTen, cards.diamondJack, cards.diamondQueen, cards.diamondKing,
                  cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive,
                  cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen,
                  cards.clubJack, cards.clubQueen, cards.clubKing)
  );

  public List<SolitaireCard> assignmentDeckTri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.spadeKing,
                  cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.spadeKing));

  public List<SolitaireCard> deck1Tri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.diamondAce,
                  cards.spadeAce, cards.heartAce, cards.clubTwo, cards.diamondTwo,
                  cards.spadeTwo, cards.heartTwo, cards.clubThree, cards.diamondThree,
                  cards.spadeThree, cards.heartThree, cards.clubFour, cards.diamondFour,
                  cards.spadeFour, cards.heartFour, cards.clubFive, cards.diamondFive,
                  cards.spadeFive, cards.heartFive, cards.clubSix, cards.diamondSix,
                  cards.spadeSix, cards.heartSix, cards.clubSeven, cards.diamondSeven,
                  cards.spadeSeven, cards.heartSeven, cards.clubEight, cards.diamondEight,
                  cards.spadeEight, cards.heartEight, cards.clubNine, cards.diamondNine,
                  cards.spadeNine, cards.heartNine, cards.clubTen, cards.diamondTen,
                  cards.spadeTen, cards.heartTen, cards.clubJack, cards.diamondJack,
                  cards.spadeJack, cards.heartJack, cards.clubQueen, cards.diamondQueen,
                  cards.spadeQueen, cards.heartQueen, cards.clubKing, cards.diamondKing,
                  cards.spadeKing, cards.heartKing, cards.clubAce, cards.diamondAce,
                  cards.spadeAce, cards.heartAce, cards.clubTwo, cards.diamondTwo,
                  cards.spadeTwo, cards.heartTwo, cards.clubThree, cards.diamondThree,
                  cards.spadeThree, cards.heartThree, cards.clubFour, cards.diamondFour,
                  cards.spadeFour, cards.heartFour, cards.clubFive, cards.diamondFive,
                  cards.spadeFive, cards.heartFive, cards.clubSix, cards.diamondSix,
                  cards.spadeSix, cards.heartSix, cards.clubSeven, cards.diamondSeven,
                  cards.spadeSeven, cards.heartSeven, cards.clubEight, cards.diamondEight,
                  cards.spadeEight, cards.heartEight, cards.clubNine, cards.diamondNine,
                  cards.spadeNine, cards.heartNine, cards.clubTen, cards.diamondTen,
                  cards.spadeTen, cards.heartTen, cards.clubJack, cards.diamondJack,
                  cards.spadeJack, cards.heartJack, cards.clubQueen, cards.diamondQueen,
                  cards.spadeQueen, cards.heartQueen, cards.clubKing, cards.diamondKing,
                  cards.spadeKing, cards.heartKing));

  public List<SolitaireCard> lastPlayableDeckTri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.spadeKing,
                  cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeKing, cards.spadeQueen, cards.clubEight));

  public List<SolitaireCard> lastKingDeckTri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.heartKing, cards.clubSix, cards.clubSeven, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.clubFive, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeQueen, cards.spadeKing,
                  cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour,
                  cards.clubFive, cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.clubKing,
                  cards.diamondAce, cards.diamondTwo, cards.diamondThree, cards.diamondFour,
                  cards.diamondFive, cards.diamondSix, cards.diamondSeven, cards.diamondEight,
                  cards.diamondNine, cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.diamondKing, cards.heartAce, cards.heartTwo, cards.heartFour,
                  cards.spadeEight, cards.heartFive, cards.heartThree, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.spadeAce, cards.spadeFive,
                  cards.spadeNine, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.diamondQueen, cards.spadeSix, cards.spadeSeven, cards.spadeTen,
                  cards.spadeJack, cards.spadeKing, cards.spadeQueen, cards.clubEight));

  public List<SolitaireCard> winNoDrawDeckTri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeKing, cards.heartKing, cards.clubKing, cards.spadeKing,
                  cards.heartKing, cards.clubKing, cards.diamondKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive,
                  cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.diamondAce,
                  cards.diamondTwo, cards.diamondThree, cards.diamondFour, cards.diamondFive,
                  cards.diamondSix, cards.diamondSeven, cards.diamondEight, cards.diamondNine,
                  cards.diamondTen, cards.clubNine, cards.diamondJack, cards.diamondKing,
                  cards.heartAce, cards.heartTwo, cards.heartFour, cards.spadeEight,
                  cards.heartFive, cards.heartThree, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartJack, cards.heartQueen,
                  cards.spadeAce, cards.spadeFive, cards.spadeNine, cards.spadeTwo,
                  cards.spadeThree, cards.spadeFour, cards.spadeSix, cards.spadeSeven,
                  cards.spadeTen, cards.spadeJack, cards.spadeQueen, cards.diamondQueen,
                  cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive,
                  cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubTen,
                  cards.heartTen, cards.clubJack, cards.clubQueen, cards.diamondAce,
                  cards.diamondTwo, cards.diamondThree, cards.diamondFour, cards.diamondFive,
                  cards.diamondSix, cards.diamondSeven, cards.diamondEight, cards.diamondNine,
                  cards.diamondTen, cards.clubNine, cards.diamondJack,
                  cards.heartAce, cards.heartTwo, cards.heartFour, cards.spadeEight,
                  cards.heartFive, cards.heartThree, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartJack, cards.heartQueen,
                  cards.spadeAce, cards.spadeFive, cards.spadeNine, cards.spadeTwo,
                  cards.spadeThree, cards.spadeFour, cards.spadeSix, cards.spadeSeven,
                  cards.spadeTen, cards.spadeJack, cards.spadeQueen, cards.diamondQueen));

  public List<SolitaireCard> QueenRepeatTri = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeAce, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.spadeFive, cards.spadeSix, cards.spadeSeven, cards.spadeEight,
                  cards.spadeNine, cards.spadeTen, cards.spadeJack, cards.spadeQueen,
                  cards.spadeKing, cards.heartAce, cards.heartTwo, cards.heartThree,
                  cards.heartFour, cards.heartFive, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartTen, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.diamondAce, cards.diamondTwo,
                  cards.diamondThree, cards.diamondFour, cards.diamondFive, cards.diamondSix,
                  cards.diamondSeven, cards.diamondEight, cards.diamondNine, cards.diamondTen,
                  cards.diamondJack, cards.diamondQueen, cards.diamondKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive, cards.clubSix,
                  cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen, cards.clubJack,
                  cards.clubQueen, cards.clubKing, cards.spadeAce, cards.spadeTwo, cards.spadeThree,
                  cards.spadeFour, cards.spadeFive, cards.spadeSix, cards.spadeSeven,
                  cards.spadeEight, cards.spadeNine, cards.spadeTen, cards.spadeJack,
                  cards.spadeQueen, cards.spadeKing, cards.heartAce, cards.heartTwo,
                  cards.heartThree, cards.heartFour, cards.heartFive, cards.heartSix,
                  cards.heartSeven, cards.heartEight, cards.heartNine, cards.heartTen,
                  cards.heartJack, cards.heartQueen, cards.heartKing, cards.diamondAce,
                  cards.diamondTwo, cards.diamondThree, cards.diamondFour, cards.diamondFive,
                  cards.diamondSix, cards.diamondSeven, cards.diamondEight, cards.diamondNine,
                  cards.diamondTen, cards.diamondJack, cards.diamondQueen, cards.diamondKing,
                  cards.clubAce, cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive,
                  cards.clubSix, cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen,
                  cards.clubQueen, cards.clubQueen, cards.clubKing)
  );

  public List<SolitaireCard> AceRepeat52 = new ArrayList<SolitaireCard>(
          Arrays.asList(cards.spadeAce, cards.spadeTwo, cards.spadeThree, cards.spadeFour,
                  cards.spadeFive, cards.spadeSix, cards.spadeSeven, cards.spadeEight,
                  cards.spadeNine, cards.spadeTen, cards.spadeJack, cards.spadeQueen,
                  cards.spadeKing, cards.heartAce, cards.heartTwo, cards.heartThree,
                  cards.heartFour, cards.heartFive, cards.heartSix, cards.heartSeven,
                  cards.heartEight, cards.heartNine, cards.heartTen, cards.heartJack,
                  cards.heartQueen, cards.heartKing, cards.diamondAce, cards.diamondTwo,
                  cards.diamondThree, cards.diamondFour, cards.diamondFive, cards.diamondSix,
                  cards.diamondSeven, cards.diamondEight, cards.diamondNine, cards.diamondTen,
                  cards.diamondJack, cards.diamondQueen, cards.diamondKing, cards.clubAce,
                  cards.clubTwo, cards.clubThree, cards.clubFour, cards.clubFive, cards.clubSix,
                  cards.clubSeven, cards.clubEight, cards.clubNine, cards.clubTen, cards.clubJack,
                  cards.clubQueen, cards.clubKing, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce,
                  cards.spadeAce, cards.spadeAce, cards.spadeAce, cards.spadeAce)
  );
}
